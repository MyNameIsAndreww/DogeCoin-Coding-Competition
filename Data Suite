# https://www.investopedia.com/terms/z/zig_zag_indicator.asp
# https://towardsdatascience.com/7-libraries-that-help-in-time-series-problems-d59473e48ddd

try:
    from sklearn.linear_model import LinearRegression
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import time
    import datetime
    from autots import AutoTS
except ImportError as error:
    print('Import Error...')


# Data processing
def data_reset():
    unix = []
    for i in df['Date']:
        u = time.mktime(datetime.datetime.strptime(i, "%Y-%m-%d").timetuple())
        unix.append(u)
    close = df['Close'].tolist()

    global data
    data = pd.DataFrame(list(zip(unix, close)), columns=['Date', 'Close'])
    plt.plot(data['Close'])


# Window Editor
def window_editor(window_start, window_end):
    data_reset()
    if not window_end:
        window_end = len(data)
    window_start = int(window_start)
    window_end = int(window_end)
    for i in data.index:
        if i < window_start or i > window_end:
            data.drop(i, inplace=True)
    plt.plot(data['Close'])


# Percent parameter in % not decimal
def zig_zag(percent):
    percent_cuttoff = percent / 100
    global index
    index = data.index.tolist()[0]
    global points
    points = [[index, data['Close'][index]]]

    # x is each close price and y is the index at which that close price was recorded
    while True:
        duplicate = index
        for x, y in zip(
                data['Close'][index - int(data.index.tolist()[0]):],
                data[index - int(data.index.tolist()[0]):].index.tolist()):
            percent = abs((x - data['Close'][index]) / data['Close'][index])
            if percent >= percent_cuttoff:
                points.append([y, x])
                index = y
                break
        if index == len(data) - 1 or duplicate == index:
            points.append([y - 1, x])
            break

    ps = pd.DataFrame(points, columns=['Index', 'Close'])
    ps.set_index('Index', inplace=True)

    plt.plot(data['Close'])
    plt.plot(ps)

    return ps


# Percent parameter in % not decimal
def zig_zag_linReg(percent):
    percent_cuttoff = percent / 100
    global index
    index = data.index.tolist()[0]
    global points
    points = [[index, data['Close'][index]]]

    # x is each close price and y is the index at which that close price was recorded
    while True:
        duplicate = index
        for x, y in zip(
                data['Close'][index - int(data.index.tolist()[0]):],
                data[index - int(data.index.tolist()[0]):].index.tolist()):
            percent = abs((x - data['Close'][index]) / data['Close'][index])
            if percent >= percent_cuttoff:
                points.append([y, x])
                index = y
                break
        if index == len(data) - 1 or duplicate == index:
            points.append([y - 1, x])
            break

    ps = pd.DataFrame(points, columns=['Index', 'Close'])

    model = []
    for i in range(1, len(ps['Index'])):
        p, r = linReg(ps['Index'][i - 1], ps['Index'][i])
        sub_model = []
        for l, k in zip(p, r):
            sub_model.append([l, k])
        model.append(sub_model)

    ps.set_index('Index', inplace=True)

    plt.plot(data['Close'])
    return model


# Linear Regression Function
def linReg(start, end):
    start = start - data.index[0]
    end = end - data.index[0]

    x = np.array(data.index.tolist()[start:end])
    y = np.array(data['Close'][start:end])
    x = x.reshape(-1, 1)
    y = y.reshape(-1, 1)

    model = LinearRegression()
    model.fit(x, y)
    # plt.plot(x, y, color='g')
    plt.plot(x, model.predict(x), color='r')
    return x, model.predict(x)


def AutoTS_Model():
    tsData = pd.read_csv("DOGE-USD.csv")

    tsdf = tsData.drop(['Adj Close', 'Low', 'High', 'Volume', 'Open'], axis=1)
    tsdf['Date'] = pd.to_datetime(tsdf['Date'])
    tsdf = tsdf.set_index('Date')

    tsdf.plot(figsize=(12, 8), title="DogeCoin", fontsize=20, label="Close Price")
    plt.grid()
    plt.legend()

    tsmodel = AutoTS(forecast_length=7, frequency='infer',
                     ensemble='simple', drop_data_older_than_periods=200)
    tsmodel = tsmodel.fit(data, date_col='Date', value_col='Close', id_col=None)

    prediction = tsmodel.predict()
    forecast = prediction.forecast

    df.plot(figsize=(12, 8), title="DogeCoin", fontsize=20, label="Close Price")
    forecast['Close'].plot(figsize=(12, 8), title='DogeCoin', fontsize=20, label='Test')
    plt.grid()
    plt.legend()

    prediction.forecast


if __name__ == "__main__":
    global df
    df = pd.read_csv("DOGE-USD.csv")
    data_reset()
    # plt.show()
    AutoTS = False
    while True:
        user = int(input('\n1) Zig-Zag  2) Linear  3) Toggle AutoTS  4) Exit '))
        if user == 1:
            percent = int(input('Enter %: '))
            model = zig_zag(percent)
            # if AutoTS:

            plt.show()
        elif user == 2:
            percent = int(input('Enter %: '))
            model = zig_zag_linReg(percent)
            plt.show()
        elif user == 3:
            AutoTS = not AutoTS
            print(f'AutoTS set to {AutoTS}')

            AutoTS_Model()
            plt.show()
        else:
            break
